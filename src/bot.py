import os
from dotenv import load_dotenv
from datetime import datetime

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters, CallbackQueryHandler
)
import pandas as pd

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ó–∞–≥—Ä—É–∂–∞–µ–º Excel-—Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
df = pd.read_excel(r'C:\Users\user\PycharmProjects\telegram_excel_sorter\data\–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.xlsx', dtype={'–ö–æ–¥': str})

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ '–ö–æ–¥' –≤ —Å—Ç—Ä–æ–∫—É
df['–ö–æ–¥'] = df['–ö–æ–¥'].astype(str)

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
NOTES_FILE = 'notes.csv'

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(NOTES_FILE):
    pd.DataFrame(columns=["User", "Magazin", "Note"]).to_csv(NOTES_FILE, index=False)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SEARCH, CHOOSE_RESULT, NOTE, DELETE_NOTE = range(4)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìä –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /view_notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫."
    )
    return SEARCH


# –ö–æ–º–∞–Ω–¥–∞ /view_notes
async def view_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        notes_df = pd.read_csv(NOTES_FILE, dtype={'UniqueID': str})

        if notes_df.empty or "Note" not in notes_df.columns:
            await update.message.reply_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        else:
            grouped = notes_df.groupby('UniqueID')

            for unique_id, group in grouped:
                magazin_name = group['Magazin'].iloc[0] if 'Magazin' in group.columns else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                text = f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {magazin_name} (–ö–æ–¥: {unique_id})\n\n"
                for idx, row in group.iterrows():
                    note_text = row.get('Note', '-')
                    user = row.get('User', '-')
                    datetime = row.get('Datetime', '-')
                    text += f"üìù {note_text} (–æ—Ç {user})\n {datetime}\n\n"

                # –û–≥—Ä–∞–Ω–∏—á–∏–º —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(text) > 4096:
                    for i in range(0, len(text), 4090):
                        await update.message.reply_text(text[i:i+4090])
                else:
                    await update.message.reply_text(text)

                # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –±–ª–æ–∫–æ–º
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_{unique_id}"),
                    InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{unique_id}")
                ]])
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        # –ö–Ω–æ–ø–∫–∞ –≤ –∫–æ–Ω—Ü–µ
        final_keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start")
        ]])
        final_msg = await update.message.reply_text("–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=final_keyboard)
        context.user_data['continue_message_id'] = final_msg.message_id


    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫: {e}")


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
def format_search_result(index, result, related_notes):
    result_text = (
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {index + 1}\n\n"
        f"–ö–æ–¥: {result.get('–ö–æ–¥', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {result.get('–ú–∞–≥–∞–∑–∏–Ω', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"–¢–∏–ø: {result.get('–¢–∏–ø', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"–§–ò–û —Å–∏—Å—Ç–µ–º–æ—Ç–µ—Ö–Ω–∏–∫–∞: {result.get('–§–ò–û —Å–∏—Å—Ç–µ–º–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"–ê–¥—Ä–µ—Å: {result.get('–ê–¥—Ä–µ—Å', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å: {result.get('–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n\n"
    )
    result_text += "üìå –ó–∞–º–µ—Ç–∫–∏:\n"
    if related_notes.empty:
        result_text += "-\n"
    else:
        for local_index, note_row in enumerate(related_notes.itertuples(), start=1):
            result_text += f"{local_index}. {note_row.Note}\n"
    return result_text


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
async def handle_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyword = update.message.text.lower()
    context.user_data['last_keyword'] = keyword

    result = df[df.apply(lambda row: row.astype(str).str.lower().str.contains(keyword).any(), axis=1)]
    notes_df = pd.read_csv(NOTES_FILE)

    if result.empty:
        await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.")
        return SEARCH
    else:
        context.user_data['search_results'] = result.head(10).to_dict(orient="records")
        keyboard = [["–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"]]

        for idx, row in enumerate(context.user_data['search_results']):
            unique_id = row.get('–ö–æ–¥', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            row_notes = notes_df[notes_df['UniqueID'] == unique_id]
            result_text = format_search_result(idx, row, row_notes)

            await update.message.reply_text(result_text)
            keyboard.append([str(idx + 1)])

        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.",
            reply_markup=reply_markup
        )
        return CHOOSE_RESULT


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def choose_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_text = update.message.text.strip()

    if selected_text.lower() == "–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return SEARCH

    if not selected_text.isdigit():
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        return CHOOSE_RESULT

    selected_index = int(selected_text) - 1
    search_results = context.user_data.get('search_results', [])

    if 0 <= selected_index < len(search_results):
        context.user_data['selected_result'] = search_results[selected_index]
        unique_id = search_results[selected_index].get('–ö–æ–¥', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        notes_df = pd.read_csv(NOTES_FILE)
        related_notes = notes_df[notes_df['UniqueID'] == unique_id]

        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = format_search_result(selected_index, search_results[selected_index], related_notes)
        await update.message.reply_text(result_text)

        if related_notes.empty:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
                reply_markup=ReplyKeyboardRemove()
            )
            return NOTE
        else:
            keyboard = [["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"]]
            if len(related_notes) > 1:
                keyboard[0].append("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏")

            for idx, _ in enumerate(related_notes.itertuples(), start=1):
                keyboard.append([f"–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É {idx}"])
            keyboard.append(["–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"])

            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            context.user_data['related_notes'] = related_notes
            return DELETE_NOTE
    else:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        return CHOOSE_RESULT


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
async def add_note_from_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    continue_msg_id = context.user_data.get('continue_message_id')
    if continue_msg_id:
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=continue_msg_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    unique_id = query.data.split("_", 1)[1]

    # –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –≤ df
    matched_row = df[df['–ö–æ–¥'].astype(str) == unique_id].head(1)
    if matched_row.empty:
        await query.edit_message_text("‚ö†Ô∏è –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return SEARCH

    result = matched_row.iloc[0].to_dict()
    context.user_data['selected_result'] = result

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    await query.edit_message_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:"
    )
    return NOTE


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
async def delete_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_text = update.message.text.strip()
    related_notes = context.user_data.get('related_notes', pd.DataFrame())

    if selected_text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        return NOTE

    if selected_text.startswith("–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"):
        try:
            selected_index = int(selected_text.split()[-1]) - 1
            if 0 <= selected_index < len(related_notes):
                selected_note = related_notes.iloc[selected_index]
                notes_df = pd.read_csv(NOTES_FILE)
                notes_df = notes_df[~((notes_df['UniqueID'] == selected_note['UniqueID']) &
                                      (notes_df['Note'] == selected_note['Note']))]
                notes_df.to_csv(NOTES_FILE, index=False)
                await update.message.reply_text("üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∏—Å–∫—É.\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –Ω–∞–∂–º–∏—Ç–µ /view_notes.")
                return SEARCH
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
        except ValueError:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return DELETE_NOTE

    if selected_text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏":
        selected_result = context.user_data.get('selected_result', {})
        unique_id = selected_result.get('–ö–æ–¥', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

        notes_df = pd.read_csv(NOTES_FILE)
        notes_df = notes_df[notes_df['UniqueID'] != unique_id]
        notes_df.to_csv(NOTES_FILE, index=False)

        await update.message.reply_text("üóëÔ∏è –í—Å–µ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∏—Å–∫—É.\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –Ω–∞–∂–º–∏—Ç–µ /view_notes.")
        return SEARCH

    if selected_text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        search_results = context.user_data.get('search_results', [])
        keyboard = [["–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"]]
        for idx, row in enumerate(search_results):
            keyboard.append([str(idx + 1)])

        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.",
            reply_markup=reply_markup
        )
        return CHOOSE_RESULT

    await update.message.reply_text(
        "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    return DELETE_NOTE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
async def handle_note_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    note_text = update.message.text
    user = update.effective_user.first_name
    selected_result = context.user_data.get('selected_result', {})

    unique_id = selected_result.get('–ö–æ–¥', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    magazin = selected_result.get('–ú–∞–≥–∞–∑–∏–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω')

    notes_df = pd.read_csv(NOTES_FILE)

    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    new_note = pd.DataFrame([[user, "", unique_id, magazin, note_text, current_datetime]],
                            columns=["User", "Keywords", "UniqueID", "Magazin", "Note", "Datetime"])
    notes_df = pd.concat([notes_df, new_note], ignore_index=True)
    notes_df.to_csv(NOTES_FILE, index=False)

    # 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    await update.message.reply_text("üìù –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    # 2. –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
    await update.message.reply_text("üìä –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /view_notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫.")

    return SEARCH



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "Start"
async def start_over(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üìä –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /view_notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫."
    )
    return SEARCH


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and (update.message.text.startswith('/start') or update.message.text.startswith('/view_notes')):
        return

    if update.message:
        await update.message.reply_text(
            "ü§ñ –Ø –Ω–µ –ø–æ–Ω—è–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start")]
            ])
        )
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "ü§ñ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start")]
            ])
        )


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SEARCH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search),
                CommandHandler("start", start),
                CommandHandler("view_notes", view_notes),
                CallbackQueryHandler(add_note_from_button, pattern="^add_"),
                CallbackQueryHandler(start_over, pattern="^start$"),
            ],
            CHOOSE_RESULT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, choose_result),
                CommandHandler("start", start),
                CommandHandler("view_notes", view_notes),
            ],
            NOTE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_note_save),
                CommandHandler("start", start),
                CommandHandler("view_notes", view_notes),
            ],
            DELETE_NOTE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, delete_note),
                CommandHandler("start", start),
                CommandHandler("view_notes", view_notes),
            ],
        },
        fallbacks=[
            MessageHandler(filters.COMMAND, fallback_handler),
        ],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("view_notes", view_notes))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()


if __name__ == "__main__":
    main()