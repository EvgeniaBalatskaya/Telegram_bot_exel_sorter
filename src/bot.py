import os
from dotenv import load_dotenv

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters, CallbackQueryHandler
)
import pandas as pd
import logging

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

application = Application.builder().token(TOKEN).build()

# –ó–∞–≥—Ä—É–∂–∞–µ–º Excel-—Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
df = pd.read_excel(r'C:\Users\user\PycharmProjects\telegram_excel_sorter\data\–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.xlsx')

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
NOTES_FILE = 'notes.csv'

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(NOTES_FILE):
    pd.DataFrame(columns=["User", "Keywords", "UniqueID", "Magazin", "Note"]).to_csv(NOTES_FILE, index=False)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SEARCH, CHOOSE_RESULT, NOTE, DELETE_NOTE = range(4)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_combined(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "üìä –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /view_notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫."
        )
    elif update.message:
        await update.message.reply_text(
            "üìä –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /view_notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫."
        )
    return SEARCH


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
def format_search_result(index, result, related_notes):
    result_text = (
        f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {index + 1}</b>\n\n"
        f"<b>–ö–æ–¥:</b> {str(result.get('–ö–æ–¥', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')).split('.')[0]}\n"
        f"<b>–ú–∞–≥–∞–∑–∏–Ω: </b> {result.get('–ú–∞–≥–∞–∑–∏–Ω', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"<b>–¢–∏–ø: </b> {result.get('–¢–∏–ø', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"<b>–§–ò–û —Å–∏—Å—Ç–µ–º–æ—Ç–µ—Ö–Ω–∏–∫–∞: </b> {result.get('–§–ò–û —Å–∏—Å—Ç–µ–º–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"<b>–ê–¥—Ä–µ—Å: </b><code>{result.get('–ê–¥—Ä–µ—Å', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}</code>\n"
        f"<b>–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:</b>{result.get('–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n\n"
    )

    result_text += "üìå <b>–ó–∞–º–µ—Ç–∫–∏:</b>\n"
    if related_notes.empty:
        result_text += "-\n"
    else:
        for local_index, note_row in enumerate(related_notes.itertuples(), start=1):
            result_text += f"{local_index}. {note_row.Note}\n"
    return result_text


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
async def handle_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyword = update.message.text.lower()
    context.user_data['last_keyword'] = keyword

    result = df[df.apply(lambda row: row.astype(str).str.lower().str.contains(keyword).any(), axis=1)]
    notes_df = pd.read_csv(NOTES_FILE)

    if result.empty:
        await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.")
        return SEARCH
    else:
        context.user_data['search_results'] = result.head(10).to_dict(orient="records")
        keyboard = [["–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"]]

        for idx, row in enumerate(context.user_data['search_results']):
            unique_id = row.get('–ö–æ–¥', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            row_notes = notes_df[notes_df['UniqueID'] == unique_id]
            result_text = format_search_result(idx, row, row_notes)

            await update.message.reply_text(result_text, parse_mode="HTML")
            keyboard.append([str(idx + 1)])

        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.",
            reply_markup=reply_markup
        )
        return CHOOSE_RESULT


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
async def choose_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_text = update.message.text.strip()

    if selected_text.lower() == "–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return SEARCH

    if not selected_text.isdigit():
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        return CHOOSE_RESULT

    selected_index = int(selected_text) - 1
    search_results = context.user_data.get('search_results', [])

    if 0 <= selected_index < len(search_results):
        context.user_data['selected_result'] = search_results[selected_index]
        unique_id = search_results[selected_index].get('–ö–æ–¥', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        notes_df = pd.read_csv(NOTES_FILE)
        related_notes = notes_df[notes_df['UniqueID'] == unique_id]

        result_text = format_search_result(selected_index, search_results[selected_index], related_notes)
        await update.message.reply_text(result_text, parse_mode="HTML")

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
        context.user_data['add_note_unique_id'] = unique_id

        if related_notes.empty:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
                reply_markup=ReplyKeyboardRemove()
            )
            return NOTE
        else:
            keyboard = [["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"]]
            if len(related_notes) > 1:
                keyboard[0].append("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏")

            for idx, _ in enumerate(related_notes.itertuples(), start=1):
                keyboard.append([f"–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É {idx}"])
            keyboard.append(["–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"])

            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            context.user_data['related_notes'] = related_notes
            return DELETE_NOTE
    else:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        return CHOOSE_RESULT


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
async def add_note_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    note_text = update.message.text.strip()
    unique_id = context.user_data.get('add_note_unique_id')

    logger.debug(f"–ü–æ–ª—É—á–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: {unique_id}, —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏: {note_text}")

    if unique_id and note_text:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ –∑–∞–≥—Ä—É–∑–∫—É
            if not os.path.exists(NOTES_FILE):
                logger.error(f"–§–∞–π–ª {NOTES_FILE} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∑–∞–º–µ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            notes_df = pd.read_csv(NOTES_FILE)
            logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞–º–µ—Ç–∫–∏: {notes_df.head()}")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∑–∞–º–µ—Ç–∫–æ–π
            new_note = {
                'UniqueID': unique_id,
                'Note': note_text,
                'User': update.message.from_user.first_name  # –∏–ª–∏ .full_name –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª–Ω–æ–µ –∏–º—è
            }
            new_note_df = pd.DataFrame([new_note])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π DataFrame
            notes_df = pd.concat([notes_df, new_note_df], ignore_index=True)
            notes_df.to_csv(NOTES_FILE, index=False)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            logger.debug(f"–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {new_note}")

            # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text("üìù –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            await update.message.reply_text(
                "üìä –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /view_notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫.",
                reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            )

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
            return SEARCH  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–∏—Å–∫–∞

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
    else:
        logger.warning("–û—à–∏–±–∫–∞: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞")

    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
async def handle_note_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    note_text = update.message.text
    user = update.effective_user.first_name
    selected_result = context.user_data.get('selected_result', {})

    unique_id = selected_result.get('–ö–æ–¥', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    magazin = selected_result.get('–ú–∞–≥–∞–∑–∏–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω')

    notes_df = pd.read_csv(NOTES_FILE)

    new_note = pd.DataFrame([[user, "", unique_id, magazin, note_text]],
                            columns=["User", "Keywords", "UniqueID", "Magazin", "Note"])
    notes_df = pd.concat([notes_df, new_note], ignore_index=True)
    notes_df.to_csv(NOTES_FILE, index=False)

    # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    await update.message.reply_text("üìù –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await update.message.reply_text("üìä –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /view_notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫.",
                                     reply_markup=ReplyKeyboardRemove())
    return SEARCH  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–ø–æ–∏—Å–∫)


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
async def delete_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_text = update.message.text.strip()
    related_notes = context.user_data.get('related_notes', pd.DataFrame())

    if selected_text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        return NOTE

    if selected_text.startswith("–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"):
        try:
            selected_index = int(selected_text.split()[-1]) - 1
            if 0 <= selected_index < len(related_notes):
                selected_note = related_notes.iloc[selected_index]
                notes_df = pd.read_csv(NOTES_FILE)
                notes_df = notes_df[~((notes_df['UniqueID'] == selected_note['UniqueID']) &
                                      (notes_df['Note'] == selected_note['Note']))]
                notes_df.to_csv(NOTES_FILE, index=False)

                # –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
                await update.message.reply_text("üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
                await update.message.reply_text("üìä –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /view_notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫.")
                return SEARCH
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
        except ValueError:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return DELETE_NOTE

    if selected_text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏":
        selected_result = context.user_data.get('selected_result', {})
        unique_id = selected_result.get('–ö–æ–¥', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

        notes_df = pd.read_csv(NOTES_FILE)
        notes_df = notes_df[notes_df['UniqueID'] != unique_id]
        notes_df.to_csv(NOTES_FILE, index=False)

        await update.message.reply_text("üóëÔ∏è –í—Å–µ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")
        await update.message.reply_text("üìä –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /view_notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫.")
        return SEARCH

    if selected_text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        search_results = context.user_data.get('search_results', [])
        keyboard = [["–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"]]
        for idx, row in enumerate(search_results):
            keyboard.append([str(idx + 1)])

        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.",
            reply_markup=reply_markup
        )
        return CHOOSE_RESULT

    await update.message.reply_text(
        "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    return DELETE_NOTE


# –ö–æ–º–∞–Ω–¥–∞ /view_notes
async def view_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not os.path.exists(NOTES_FILE):
            logger.error(f"–§–∞–π–ª {NOTES_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∑–∞–º–µ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        notes_df = pd.read_csv(NOTES_FILE)
        logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞–º–µ—Ç–∫–∏: {notes_df.head()}")

        if notes_df.empty or "Note" not in notes_df.columns:
            await update.message.reply_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        else:
            grouped = notes_df.groupby('UniqueID')

            for unique_id, group in grouped:
                unique_id_str = str(unique_id).split('.')[0]

                # –ù–∞—Ö–æ–¥–∏–º –∏–º—è –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ –∫–æ–¥—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º df
                store_name = df[df['–ö–æ–¥'].astype(str).str.split('.').str[0] == unique_id_str]['–ú–∞–≥–∞–∑–∏–Ω'].values
                magazin_name = store_name[0] if len(store_name) > 0 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                text = f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {magazin_name} (–ö–æ–¥: {unique_id_str})\n\n"
                for idx, row in group.iterrows():
                    note_text = row.get('Note', '-')
                    user = row.get('User', '-')
                    text += f"üìù {note_text} (–æ—Ç {user})\n"

                if len(text) > 4096:
                    for i in range(0, len(text), 4090):
                        await update.message.reply_text(text[i:i + 4090])
                else:
                    await update.message.reply_text(text)

                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_{unique_id}"),
                    InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{unique_id}")
                ]])
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        await update.message.reply_text("–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /start")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å"
async def add_note_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º unique_id –∏–∑ callback_data
    callback_data = update.callback_query.data
    unique_id = callback_data.split('_')[1]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    await update.callback_query.answer()  # –û—Ç–∫–ª–∏–∫–∞–µ–º—Å—è –Ω–∞ –∫–Ω–æ–ø–∫—É
    await update.callback_query.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏:",
        reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º unique_id –≤ context.user_data –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
    context.user_data['add_note_unique_id'] = unique_id
    return NOTE  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–ù–ï ADD_NOTE)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and (update.message.text.startswith('/start') or update.message.text.startswith('/view_notes')):
        return

    if update.message:
        await update.message.reply_text(
            "ü§ñ –Ø –Ω–µ –ø–æ–Ω—è–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start")]
            ])
        )
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "ü§ñ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start")]
            ])
        )


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start_combined),
            CallbackQueryHandler(start_combined, pattern="^start$"),
        ],
        states={
            SEARCH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search),
                CommandHandler("start", start_combined),
                CommandHandler("view_notes", view_notes),
                CallbackQueryHandler(add_note_callback, pattern="^add_"),
                CallbackQueryHandler(start_combined, pattern="^start$"),
            ],
            CHOOSE_RESULT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, choose_result),
                CommandHandler("start", start_combined),
                CommandHandler("view_notes", view_notes),
                CallbackQueryHandler(start_combined, pattern="^start$"),
            ],
            NOTE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_note_text),
                CommandHandler("start", start_combined),
                CommandHandler("view_notes", view_notes),
                CallbackQueryHandler(start_combined, pattern="^start$"),
            ],
            DELETE_NOTE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, delete_note),
                CommandHandler("start", start_combined),
                CommandHandler("view_notes", view_notes),
                CallbackQueryHandler(start_combined, pattern="^start$"),
            ],
        },
        fallbacks=[MessageHandler(filters.ALL, fallback_handler)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("view_notes", view_notes))
    app.add_handler(CommandHandler('start', start_combined))
    app.add_handler(CallbackQueryHandler(start_combined, pattern='^start$'))
    app.add_handler(CallbackQueryHandler(add_note_callback, pattern='^add_'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_note_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()


if __name__ == "__main__":
    main()